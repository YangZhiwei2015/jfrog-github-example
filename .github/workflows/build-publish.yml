name: build-publish-scan
on:
    push:
        branches:

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  attestations: write
jobs:
    build-publish-python:
        runs-on: ubuntu-latest
        env:
          DOCKER_REPO: 'codeninjas-proj-docker-local'
          IMAGE_NAME: 'github-jfrog-example:4'
          JF_URL: https://${{ vars.JF_URL }}/
        steps:
            # Use the specific setup-cli branch
            - uses: eyaldelarea/setup-jfrog-cli@cleanUpSummaries
              name: Setup JFrog CLI
              id: setup-cli
              env:
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: jfrog-github-oidc

            - name: Checkout the repository
              uses: actions/checkout@v4


            - name: configure jfrog environment
              run: |
                jf pip-config --repo-resolve=codeninjas-proj-python-virtual    

            - name: configure environment
              run: |                      
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: |                      
                jf pip install -r requirements.txt
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                jf rt u dist/ codeninjas-proj-python-virtual/example-projects/

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}


            - name: Build Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                push: true
                platforms: linux/amd64 #, linux/arm64
                tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}


            - name: docker scan
              run: |  
                 jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                               

            - name: add docker package to build
              run: |  
                 echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
                 jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

            - name: debug printouts
              run: |  
                 echo "sha256:${{ steps.build.outputs.digest }}"
                 
            - uses: actions/attest-build-provenance@v1
              id: attest
              with:
                subject-name: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                subject-digest: sha256:${{ steps.build.outputs.digest }}
                push-to-registry: true

            - name: debug printouts 2
              run: |  
                 echo "bundle-path=${{ steps.attest.outputs.bundle-path }}"
                 
            - name: publish build info
              run: |
                jf rt build-add-dependencies
                jf rt build-collect-env 
                jf rt build-publish

            - name: build scan
              run: |            
                jf build-scan --fail=false
